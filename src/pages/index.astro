---
import Root from '~/layouts/Root.astro';
import LandingPage, { WebsiteAssets } from '~/components/LandingPage.astro';
import Logo_Main_Mono from '~/assets/images/Logo_Main_Mono.svg';
import Logo_Main_Light from '~/assets/images/Logo_Main_Light.svg';
import RightSide_Main_Mono from '~/assets/images/RightSide_Main_Mono.svg';
import LeftSide_Main_Mono from '~/assets/images/LeftSide_Main_Mono.svg';
import RightSide_Main_Col from '~/assets/images/RightSide_Main_Col.svg';
import LeftSide_Main_Col from '~/assets/images/LeftSide_Main_Col.svg';
import SeriousRiddle from '~/components/SeriousRiddle.astro';

var websiteAssets: WebsiteAssets[] = [
	{
		homepage: {
			main_logo: Logo_Main_Mono,
			left_section: LeftSide_Main_Mono,
			right_section: RightSide_Main_Mono,
		},
	},
	{
		homepage: {
			main_logo: Logo_Main_Light,
			left_section: LeftSide_Main_Col,
			right_section: RightSide_Main_Col,
		},
	},
];

const sides_id = ['left', 'right'];
---

<div class="transition delay-150">
	<SeriousRiddle />
</div>
<Root title="Homepage">
	<div id="riddle-selector-hidden">
		<div class="grid grid-cols-[1fr_1fr]">
			<button id="serious-button" class="w-100px h-12 rounded-2xl bg-orange">serious button</button>
			<button id="playful-button" class="w-100px h-12 rounded-2xl bg-black text-white">playful button</button>
		</div>
	</div>
	<div class="hidden" id="riddle-riddles-hidden">
		<div class="block" id="riddle-serious-hidden">
			<SeriousRiddle />
		</div>
		<div class="hidden" id="riddle-playful-hidden">Playful Riddle</div>
	</div>
	<div class="hidden" id="riddle-website-hidden">
		<LandingPage
			css_attributes_parent={['z-5']}
			css_attributes_child={[]}
			id={sides_id[0]}
			websiteAssets={websiteAssets[0]}
		/>
		<div
			id="middle"
			class="animate-wigglemiddle <lg:hidden left-[50%] h-full min-h-full cursor-ew-resize absolute z-20">
			<!-- class -translate-x-1/2 has issues I don't know why -->
			<div
				style="transform: translateX(-50%);"
				class="w-15 h-5 border-1 bg-white border-[#FFAD8A] absolute left-1/2 top-11/36 grid grid-cols-[1fr_1fr]">
				<svg
					class="max-w-5 max-h-5 m-auto"
					width="15"
					height="15"
					viewBox="0 0 15 15"
					fill="none"
					xmlns="http://www.w3.org/2000/svg"
					><path
						d="M8.84182 3.13514C9.04327 3.32401 9.05348 3.64042 8.86462 3.84188L5.43521 7.49991L8.86462 11.1579C9.05348 11.3594 9.04327 11.6758 8.84182 11.8647C8.64036 12.0535 8.32394 12.0433 8.13508 11.8419L4.38508 7.84188C4.20477 7.64955 4.20477 7.35027 4.38508 7.15794L8.13508 3.15794C8.32394 2.95648 8.64036 2.94628 8.84182 3.13514Z"
						fill="currentColor"
						fill-rule="evenodd"
						clip-rule="evenodd"></path>
				</svg>
				<svg
					class="max-w-5 max-h-5 m-auto"
					width="15"
					height="15"
					viewBox="0 0 15 15"
					fill="none"
					xmlns="http://www.w3.org/2000/svg"
					><path
						d="M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z"
						fill="currentColor"
						fill-rule="evenodd"
						clip-rule="evenodd"></path>
				</svg>
			</div>
		</div>
		<LandingPage
			css_attributes_parent={[
				'animate-wiggle dark z-15 ml-[50%] !<lg:ml-0 !lg:block border-l-1 border-[#FFAD8A] border-solid',
			]}
			css_attributes_child={['animate-wigglechild -left-1/2 !<lg:left-0']}
			id={sides_id[1]}
			websiteAssets={websiteAssets[1]}
		/>
		<div class="hidden absolute right-[10px] bottom-[10px] lg:hidden button-div z-25">
			<button id="switch-button" class="w-100px h-12 rounded-2xl bg-orange">switch</button>
		</div>
	</div>

	<style></style>
</Root>

<!-- Riddle selector and website management -->
<script>
	enum WebsiteState {
		Selection = 'selection',
		Playful = 'playful',
		Serious = 'serious',
		Website = 'website',
	}
	function reEvaluateState() {
		const localStorageValue = localStorage.getItem('websiteState');
		const previousState = localStorageValue != null ? (localStorageValue as WebsiteState) : undefined;
		let state: WebsiteState = WebsiteState.Website;
		if (previousState != null && Object.values(WebsiteState).includes(previousState)) {
			state = previousState;
		}
		const selector = document.getElementById('riddle-selector-hidden');
		const riddles = document.getElementById('riddle-riddles-hidden');
		const playful = document.getElementById('riddle-playful-hidden');
		const serious = document.getElementById('riddle-serious-hidden');
		const website = document.getElementById('riddle-website-hidden');
		if (selector == null || riddles == null || playful == null || serious == null || website == null) {
			console.log("Can't access riddle block elements!");
			return;
		}
		switch (state) {
			case WebsiteState.Playful:
				{
					selector.style.display = 'none';
					riddles.style.display = 'block';
					playful.style.display = 'block';
					serious.style.display = 'none';
					website.style.display = 'none';
				}
				break;
			case WebsiteState.Selection:
				{
					selector.style.display = 'grid';
					riddles.style.display = 'none';
					playful.style.display = 'none';
					serious.style.display = 'none';
					website.style.display = 'none';
				}
				break;
			case WebsiteState.Serious:
				{
					selector.style.display = 'none';
					riddles.style.display = 'block';
					playful.style.display = 'none';
					serious.style.display = 'block';
					website.style.display = 'none';
				}
				break;
			case WebsiteState.Website:
				{
					selector.style.display = 'none';
					riddles.style.display = 'none';
					playful.style.display = 'none';
					serious.style.display = 'none';
					website.style.display = 'block';
				}
				break;
			default:
				break;
		}
		localStorage.setItem('websiteState', state);
	}
	reEvaluateState();
</script>

<script>
	// Query the element
	const resizer = document.getElementById('middle');
	const leftSide = document.getElementById('left');
	const rightSide = document.getElementById('right');
	const rightSideChild = document.getElementById('right-child');
	const switchButton = document.getElementById('switch-button');

	// The current position of mouse
	let x = 0;

	// Width of left and right sides
	let rightMargin: number | undefined = 0;

	// Handle the mousedown event
	// that's triggered when user drags the resizer
	const mouseDownHandler = function (e: any) {
		// Get the current mouse position
		x = e.clientX;
		rightMargin = rightSide?.getBoundingClientRect().left;

		// Attach the listeners to `document`
		document.addEventListener('mousemove', mouseMoveHandler);
		document.addEventListener('mouseup', mouseUpHandler);
	};

	// Attach the handler
	resizer?.addEventListener('mousedown', mouseDownHandler);

	// Handle mouse movement
	const mouseMoveHandler = function (e: any) {
		// How far the mouse has been moved
		const dx = e.clientX - x;

		if (resizer == null || rightSide == null || rightSideChild == null || rightMargin == null || leftSide == null) {
			console.log('resizer null');
			return;
		}

		let containerWidth = resizer.parentElement?.getBoundingClientRect().width ?? 1;
		const newRightLeft = ((rightMargin + dx) * 100) / containerWidth;
		rightSide.style.marginLeft = `${newRightLeft}%`;
		resizer.style.left = `${newRightLeft}%`;
		rightSideChild.style.left = `${-newRightLeft}%`;

		document.body.style.cursor = 'col-resize';
		leftSide.style.userSelect = 'none';
		leftSide.style.pointerEvents = 'none';

		rightSide.style.userSelect = 'none';
		rightSide.style.pointerEvents = 'none';
	};

	// Hanlde mouse UP
	const mouseUpHandler = function () {
		if (resizer == null || rightSide == null || leftSide == null) {
			console.log('resizer null');
			return;
		}
		resizer.style.removeProperty('cursor');
		document.body.style.removeProperty('cursor');

		leftSide.style.removeProperty('user-select');
		leftSide.style.removeProperty('pointer-events');

		rightSide.style.removeProperty('user-select');
		rightSide.style.removeProperty('pointer-events');

		// Remove the handlers of `mousemove` and `mouseup`
		document.removeEventListener('mousemove', mouseMoveHandler);
		document.removeEventListener('mouseup', mouseUpHandler);
	};

	// Handle the touchstart event
	// that's triggered when user touch the resizer
	// FIXME: it seems to resize the window, needs to be tried on a real tablet or ipad
	const touchStartHandler = function (e: any) {
		// Get the current mouse position
		x = e.touches[0].clientX;
		rightMargin = rightSide?.getBoundingClientRect().left;

		// Attach the listeners to `document`
		document.addEventListener('touchmove', touchMoveHandler);
		document.addEventListener('touchend', touchEndHandler);
	};

	resizer?.addEventListener('touchstart', touchStartHandler);

	// Handle finger movement
	const touchMoveHandler = function (e: any) {
		// How far the mouse has been moved
		const dx = e.touches[0].clientX - x;

		if (resizer == null || rightSide == null || rightSideChild == null || rightMargin == null || leftSide == null) {
			console.log('resizer null');
			return;
		}

		let containerWidth = resizer.parentElement?.getBoundingClientRect().width ?? 1;
		const newRightLeft = ((rightMargin + dx) * 100) / containerWidth;
		rightSide.style.marginLeft = `${newRightLeft}%`;
		resizer.style.left = `${newRightLeft}%`;
		rightSideChild.style.left = `${-newRightLeft}%`;
	};

	// Handle finger UP
	const touchEndHandler = function () {
		if (resizer == null || rightSide == null || leftSide == null) {
			console.log('resizer null');
			return;
		}

		// Remove the handlers of `mousemove` and `mouseup`
		document.removeEventListener('touchmove', touchMoveHandler);
		document.removeEventListener('touchend', touchEndHandler);
	};

	// Mobile section button switchMode handler
	let stylePage = true;
	const switchClickHandler = function () {
		if (rightSide == null || leftSide == null || switchButton == null) {
			console.log('resizer null');
			return;
		}
		// TRUE -> going from play to serious
		// FALSE -> going from serious to play
		if (stylePage) {
			leftSide.style.display = 'block';
			rightSide.style.display = 'none';
			switchButton.style.backgroundColor = '#4A4A4A';
			stylePage = false;
		} else {
			rightSide.style.display = 'block';
			leftSide.style.display = 'none';
			switchButton.style.backgroundColor = '#FF8855';
			stylePage = true;
		}
	};
	switchButton?.addEventListener('click', switchClickHandler);
</script>

<!-- COMPONENTS JAVASCRIPT -->
<script define:vars={{ sides_id }}>
	const emailSubmit = function (event) {
		const id = event.currentTarget.id;
		console.log('sending email address');
		var myHeaders = new Headers();
		myHeaders.append('Content-Type', 'application/json');

		var raw = JSON.stringify({
			email: document.getElementById('email_form_text-' + id).value,
		});

		console.log(raw);

		var requestOptions = {
			method: 'POST',
			headers: myHeaders,
			body: raw,
		};

		fetch('/api/subscribe', requestOptions)
			.then((response) => response.text())
			.then((result) => console.log(result))
			.catch((error) => console.log('error', error));
	};
	function handleForm(event) {
		event.preventDefault();
	}
	for (let e = 0; e < sides_id.length; e++) {
		const id = sides_id[e];
		const submitButton = document.getElementById('email_form_submit-' + id);
		submitButton.id = id;
		const form = document.getElementById('email_form-' + id);
		submitButton?.addEventListener('click', emailSubmit);
		form?.addEventListener('submit', handleForm);
	}
</script>
