---
import Root from '~/layouts/Root.astro';
import LandingPage, { WebsiteAssets } from '~/components/LandingPage.astro';
import Logo_Main_Mono from '~/assets/images/Logo_Main_Mono.svg';
import Logo_Main_Light from '~/assets/images/Logo_Main_Light.svg';
import RightSide_Main_Mono from '~/assets/images/RightSide_Main_Mono.jpg';
import LeftSide_Main_Mono from '~/assets/images/LeftSide_Main_Mono.jpg';
import RightSide_Main_Col from '~/assets/images/RightSide_Main_Col.jpg';
import LeftSide_Main_Col from '~/assets/images/LeftSide_Main_Col.jpg';
import Github_Image_Yellow from '~/assets/images/Github_Yellow.svg';
// import Github_Image_Blue from '~/assets/images/Github_Blue.svg';
import Github_Image_White from '~/assets/images/Github_White.svg';
import Linkedin_Image_White from '~/assets/images/Linkedin_White.svg';
// import Linkedin_Image_Blue from '~/assets/images/Linkedin_Blue.svg';
import Linkedin_Image_Yellow from '~/assets/images/Linkedin_Yellow.svg';
import SeriousRiddle from '~/components/SeriousRiddle.astro';
import TrexGame from '~/components/TrexGame.astro';
import { getSides } from '~/utils/utils';

var websiteAssets: WebsiteAssets[] = [
	{
		homepage: {
			main_logo: Logo_Main_Mono,
			left_section: LeftSide_Main_Mono,
			right_section: RightSide_Main_Mono,
			gh_image: Github_Image_White,
			linkedin_image: Linkedin_Image_White,
		},
	},
	{
		homepage: {
			main_logo: Logo_Main_Light,
			left_section: LeftSide_Main_Col,
			right_section: RightSide_Main_Col,
			gh_image: Github_Image_Yellow,
			linkedin_image: Linkedin_Image_Yellow,
		},
	},
];

const sides_id = getSides();
---

<Root title="RunTime Machines">
	<div id="riddle-selector-hidden" class="hidden h-full pt-15 pb-20 bg-black">
		<div id="titleSelection" class="mx-auto text-2xl text-white text-center"></div>
		<div class="md:grid md:grid-cols-[1fr_1fr] md:auto-rows-auto md:h-full text-6xl mt-15 <md:mt-2/5">
			<div
				id="serious-button"
				class="md:w-5/6 md:h-3/5 mx-auto glow items-center flex bg-black row-start-1 col-start-1 col-end-2 <md:pb-5 <md:border-b-2">
				<div id="serious-text" class="text-center w-full <md:animate-pulse"></div>
			</div>
			<div
				id="playful-button"
				class="md:w-5/6 md:h-3/5 mx-auto glow items-center flex bg-black row-start-1 <md:row-start-2 col-start-2 <md:col-start-1 <md:pt-7">
				<div id="playful-text" class="text-center w-full <md:animate-bounce"></div>
			</div>
		</div>
	</div>
	<div
		class="hidden h-full transition-all linear duration-300 overflow-x-hidden max-h-full h-full"
		id="riddle-riddles-hidden">
		<div id="close" class="mr-0 mt-0 text-right hidden text-3xl text-white">&times;</div>
		<div class="block h-full" id="riddle-serious-hidden">
			<div class="h-full">
				<SeriousRiddle />
			</div>
		</div>
		<div class="hidden w-full h-full bg-[#181930] bg-opacity-90" id="riddle-playful-hidden">
			<TrexGame />
		</div>
	</div>
	<div style="overflow-y: overlay" class="hidden h-full w-full overflow-x-hidden relative" id="riddle-website-hidden">
		<LandingPage
			css_attributes_parent={['z-5 md:border-l-1 md:border-gray-dark']}
			css_attributes_child={[]}
			id={sides_id[0]}
			websiteAssets={websiteAssets[0]}
		/>
		<LandingPage
			css_attributes_parent={[
				'dark !<md:ml-0 md:animate-wiggle md:dark z-15 ml-0 md:ml-[50%] md:block md:border-l-1 md:border-white border-solid',
			]}
			css_attributes_child={['md:animate-wigglechild ml-0 md:-left-1/2 !<md:left-0 ']}
			id={sides_id[1]}
			websiteAssets={websiteAssets[1]}
		/>
	</div>

	<style></style>
</Root>

<!-- Riddle selector and website management -->
<script>
	import { WebsiteState } from '~/utils/utils';

	function setupSelection() {
		const serious_button = document.getElementById('serious-button');
		const playful_button = document.getElementById('playful-button');

		if (serious_button == null || playful_button == null) {
			console.error('broken selection buttons');
			return;
		}

		serious_button.addEventListener('click', seriousSelection);
		playful_button.addEventListener('click', playfulSelection);

		function seriousSelection() {
			localStorage.setItem('websiteState', 'serious');
			reEvaluateState();
		}

		function playfulSelection() {
			localStorage.setItem('websiteState', 'playful');
			reEvaluateState();
		}
	}

	function reEvaluateState() {
		const localStorageValue = localStorage.getItem('websiteState');
		const previousState = localStorageValue != null ? (localStorageValue as WebsiteState) : undefined;
		let state: WebsiteState = WebsiteState.Selection;
		if (previousState != null && Object.values(WebsiteState).includes(previousState)) {
			state = previousState;
		}
		const selector = document.getElementById('riddle-selector-hidden');
		const riddles = document.getElementById('riddle-riddles-hidden');
		const playful = document.getElementById('riddle-playful-hidden');
		const serious = document.getElementById('riddle-serious-hidden');
		const website = document.getElementById('riddle-website-hidden');
		if (selector == null || riddles == null || playful == null || serious == null || website == null) {
			console.error("Can't access riddle block elements!");
			return;
		}
		switch (state) {
			case WebsiteState.Playful:
				{
					selector.style.display = 'none';
					riddles.style.display = 'block';
					playful.style.display = 'block';
					serious.style.display = 'none';
					website.style.display = 'none';
					window.dispatchEvent(new Event('startTrexRiddle'));
				}
				break;
			case WebsiteState.Selection:
				{
					selector.style.display = 'block';
					riddles.style.display = 'none';
					playful.style.display = 'none';
					serious.style.display = 'none';
					website.style.display = 'none';
				}
				break;
			case WebsiteState.Serious:
				{
					selector.style.display = 'none';
					riddles.style.display = 'block';
					playful.style.display = 'none';
					serious.style.display = 'block';
					website.style.display = 'none';
					window.dispatchEvent(new Event('riddleThink'));
				}
				break;
			case WebsiteState.Website:
				{
					selector.style.display = 'none';
					riddles.style.display = 'block';
					setTimeout(function () {
						playful.style.display = 'none';
						riddles.style.display = 'none';
						serious.style.display = 'none';
					}, 300);
					riddles.style.maxHeight = '0';
					website.style.display = 'block';
				}
				break;
			default:
				break;
		}
		localStorage.setItem('websiteState', state);
	}
	setupSelection();
	reEvaluateState();
	window.addEventListener('stateChange', reEvaluateState);
</script>

<script>
	// Query the element
	const resizers = document.getElementsByClassName('middle');
	const leftSide = document.getElementById('left');
	const rightSide = document.getElementById('right');
	const rightSideChild = document.getElementById('right-child');

	// The current position of mouse
	let x = 0;

	// Width of left and right sides
	let rightMargin: number | undefined = 0;

	// Handle the mousedown event
	// that's triggered when user drags the resizer
	const mouseDownHandler = function (e: any) {
		// Get the current mouse position
		x = e.clientX;
		rightMargin = rightSide?.getBoundingClientRect().left;

		// Attach the listeners to `document`
		document.addEventListener('mousemove', mouseMoveHandler);
		document.addEventListener('mouseup', mouseUpHandler);
	};

	// Handle mouse movement
	const mouseMoveHandler = function (e: any) {
		// How far the mouse has been moved
		const dx = e.clientX - x;

		if (resizers == null || rightSide == null || rightSideChild == null || rightMargin == null || leftSide == null) {
			//console.log('resizer null');
			return;
		}

		let containerWidth = resizers[0].parentElement?.getBoundingClientRect().width;
		if (containerWidth == 0) return;
		const newRightLeft = Math.max(1, Math.min(99, ((rightMargin + dx) * 100) / containerWidth));
		rightSide.style.marginLeft = `${newRightLeft}%`;
		for (let i = 0; i < resizers.length; i++) {
			const element = resizers[i];
			element.style.left = `${newRightLeft}%`;
		}
		//e.target.style.left = `${newRightLeft}%`;
		rightSideChild.style.left = `${-newRightLeft}%`;

		document.body.style.cursor = 'col-resize';
		leftSide.style.userSelect = 'none';
		leftSide.style.pointerEvents = 'none';

		rightSide.style.userSelect = 'none';
		rightSide.style.pointerEvents = 'none';
	};

	// Hanlde mouse UP
	const mouseUpHandler = function () {
		if (resizers == null || rightSide == null || leftSide == null) {
			//console.log('resizer null');
			return;
		}

		for (let i = 0; i < resizers.length; i++) {
			const element = resizers[i];
			element.style.removeProperty('cursor');
		}

		document.body.style.removeProperty('cursor');

		leftSide.style.removeProperty('user-select');
		leftSide.style.removeProperty('pointer-events');

		rightSide.style.removeProperty('user-select');
		rightSide.style.removeProperty('pointer-events');

		// Remove the handlers of `mousemove` and `mouseup`
		document.removeEventListener('mousemove', mouseMoveHandler);
		document.removeEventListener('mouseup', mouseUpHandler);
	};

	// Handle the touchstart event
	// that's triggered when user touch the resizer
	// FIXME: it seems to resize the window, needs to be tried on a real tablet or ipad
	const touchStartHandler = function (e: any) {
		// Get the current mouse position
		x = e.touches[0].clientX;
		rightMargin = rightSide?.getBoundingClientRect().left;

		// Attach the listeners to `document`
		document.addEventListener('touchmove', touchMoveHandler);
		document.addEventListener('touchend', touchEndHandler);
	};
	// Handle finger movement
	const touchMoveHandler = function (e: any) {
		// How far the mouse has been moved
		const dx = e.touches[0].clientX - x;

		if (resizers == null || rightSide == null || rightSideChild == null || rightMargin == null || leftSide == null) {
			//console.log('resizer null');
			return;
		}

		let containerWidth = resizers[0].parentElement?.getBoundingClientRect().width ?? 1;
		const newRightLeft = ((rightMargin + dx) * 100) / containerWidth;
		rightSide.style.marginLeft = `${newRightLeft}%`;
		e.target.style.left = `${newRightLeft}%`;
		rightSideChild.style.left = `${-newRightLeft}%`;
	};

	// Handle finger UP
	const touchEndHandler = function () {
		if (resizers == null || rightSide == null || leftSide == null) {
			//console.log('resizer null');
			return;
		}

		// Remove the handlers of `mousemove` and `mouseup`
		document.removeEventListener('touchmove', touchMoveHandler);
		document.removeEventListener('touchend', touchEndHandler);
	};

	// Attach the handler
	for (let i = 0; i < resizers.length; i++) {
		const element = resizers[i];
		element.addEventListener('mousedown', mouseDownHandler);
		element.addEventListener('touchstart', touchStartHandler);
	}
</script>

<!-- COMPONENTS JAVASCRIPT -->
<!-- EMAIL COMPONENT -->
<script>
	import { getSides } from '~/utils/utils';
	import colors from 'windicss/colors';

	const sides_id = getSides();

	const emailSubmitHomepage = (event) => {
		emailSubmit(event, 'homepage');
	};
	// TODO: use 'emailSubmitQuiz' when submitting the email after completing the quiz riddle
	// const emailSubmitQuiz = event => {
	// 	emailSubmit(event, "quiz")
	// };
	const emailSubmit = function (event, subscribed_via) {
		const id = event.currentTarget.face_id;
		//console.log('sending email address');
		var myHeaders = new Headers();
		myHeaders.append('Content-Type', 'application/json');

		var raw = JSON.stringify({
			email: document.getElementById('email_form_text-' + id).value,
			subscribed_via: subscribed_via,
		});

		var requestOptions = {
			method: 'POST',
			headers: myHeaders,
			body: raw,
		};

		fetch('/api/subscribe', requestOptions)
			.then((response) => response.json())
			.then((result) => {
				for (let e = 0; e < sides_id.length; e++) {
					const id = sides_id[e];
					const button = document.getElementById('email_form_submit-' + id);
					switch (result.message) {
						case 'Member Exists':
						case 'email subscribed':
							button.innerHTML = 'Subscribed';
							button.style.backgroundColor = colors.green[500];
							button.disabled = true;
							break;
						case 'email invalid':
							button.style.backgroundColor = colors.red[500];
							button.innerHTML = 'Invalid';
							button.invalid = true;
							break;
						default:
							break;
					}
				}
			})
			.catch((error) => {
				console.error('error', error);
				const submitButton = document.getElementsByClassName('email_form_submit-' + id);
				for (let e = 0; e < submitButton.length; e++) {
					const button = submitButton[e];
					button.innerHTML = 'Error';
					button.style.backgroundColor = 'reds';
				}
			});
	};
	function handleForm(event) {
		event.preventDefault();
	}
	function startupActions() {
		for (let e = 0; e < sides_id.length; e++) {
			const id = sides_id[e];
			const submitButton = document.getElementById('email_form_submit-' + id);
			submitButton.face_id = id;
			const form = document.getElementById('email_form-' + id);
			submitButton?.addEventListener('click', emailSubmitHomepage);
			form?.addEventListener('submit', handleForm);
			const text_field = document.getElementById('email_form_text-' + id);
			text_field?.addEventListener('keyup', emailBoxSyncronization);
			text_field.face_id = id;
		}
	}

	startupActions();

	function emailBoxSyncronization(event) {
		for (let e = 0; e < sides_id.length; e++) {
			const id = event.currentTarget.face_id;
			if (sides_id[e] != id) {
				const text_field = document.getElementById('email_form_text-' + sides_id[e]);
				text_field.value = event.currentTarget.value;
			}
		}
	}
</script>

<script>
	// Play modal quiz
	const riddles = document.getElementById('riddle-riddles-hidden');
	const serious = document.getElementById('riddle-serious-hidden');
	const playful = document.getElementById('riddle-playful-hidden');
	const closeButton = document.getElementById('close');
	const classes = [
		'absolute',
		'w-full',
		'bg-opacity-70',
		'bg-gray-800',
		'animate',
		'md:px-45',
		'md:pt-20',
		'md:pb-20',
		'z-50',
		'px-10',
		'pt-10',
		'pb-15',
	];

	window.addEventListener('think', startModalQuiz);
	window.addEventListener('play', startModalRunner);

	function startModalQuiz() {
		if (riddles == null || serious == null) return;
		riddles.style.display = 'block';
		riddles.style.maxHeight = '100%';
		serious.style.display = 'block';
		closeButton.style.display = 'block';
		riddles.classList.add(...classes);
		//serious.classList.add('rounded-2xl');
	}

	function startModalRunner() {
		if (playful == null || riddles == null) return;
		riddles.style.display = 'block';
		riddles.style.maxHeight = '100%';
		playful.style.display = 'block';
		closeButton.style.display = 'block';
		riddles.classList.add(...classes);
		//playful.classList.add('rounded-2xl');
		window.dispatchEvent(new Event('startTrexFull'));
	}

	window.onclick = function (event) {
		if (riddles == null || serious == null || playful == null) return;
		if (event.target == riddles || event.target == closeButton) {
			riddles.style.display = 'none';
			riddles.style.maxHeight = '0%';
			serious.style.display = 'none';
			playful.style.display = 'none';
			riddles.classList.remove(...classes);
			window.dispatchEvent(new Event('focusOffGameRiddleModal'));
		}
	};
</script>

<script>
	function typeWriter(arrayDiv: HTMLElement[], texts: string[]) {
		arrayDiv.forEach(function (element: HTMLElement) {
			element.textContent = '';
		});
		let time = 50;

		for (let index = 0; index < arrayDiv.length; index++) {
			const div = arrayDiv[index];
			for (let e = 0; e < texts[index].length; e++) {
				const char = texts[index][e];
				setTimeout(() => {
					if (localStorageValue == 'selection') div.innerHTML += char;
				}, time);
				time += 45;
			}
		}
	}

	const titleSelection = document.getElementById('titleSelection');
	const seriousText = document.getElementById('serious-text');
	const playfulText = document.getElementById('playful-text');
	const localStorageValue = localStorage.getItem('websiteState');
	if (titleSelection != null && localStorageValue == 'selection')
		typeWriter([titleSelection, seriousText, playfulText], ['Choose your side', 'Thinker', 'Builder']);
</script>

<style>
	.animate {
		animation-duration: 1s;
		animation-name: animate-fade;
		animation-delay: 0.5s;
		animation-fill-mode: backwards;
	}

	@keyframes animate-fade {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}

	.glow {
		color: #fff;
		-moz-transition: all 0.2s ease-in;
		-o-transition: all 0.2s ease-in;
		-webkit-transition: all 0.2s ease-in;
		transition: all 0.2s ease-in;
	}

	.glow:hover {
		color: #fff;
		-moz-transition: all 0.2s ease-in;
		-o-transition: all 0.2s ease-in;
		-webkit-transition: all 0.2s ease-in;
		transition: all 0.2s ease-in;
		text-shadow: 0 0 7px #fff, 0 0 10px #73fdcf, 0 0 21px #73fdcf, 0 0 42px #0fa, 0 0 82px #0fa, 0 0 92px #0fa,
			0 0 102px #0fa, 0 0 151px #0fa;
	}
</style>
